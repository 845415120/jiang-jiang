import{_ as s,o as a,c as n,h as l}from"./app.0ca118e2.js";const B=JSON.parse('{"title":"浅拷贝","description":"","frontmatter":{},"headers":[{"level":3,"title":"常见的浅拷贝方法有以下几种","slug":"常见的浅拷贝方法有以下几种","link":"#常见的浅拷贝方法有以下几种","children":[]},{"level":2,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[{"level":3,"title":"面经","slug":"面经","link":"#面经","children":[]}]}],"relativePath":"note/面试之路/深浅拷贝.md","lastUpdated":null}'),p={name:"note/面试之路/深浅拷贝.md"},e=l(`<h1 id="浅拷贝" tabindex="-1">浅拷贝 <a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a></h1><p>拷贝基本数据类型时 直接拷贝基本数据类型的值 拷贝引用类型时,拷贝的是内存地址,就是拷贝后的内容与原始内容指向同一个内存地址</p><h3 id="常见的浅拷贝方法有以下几种" tabindex="-1">常见的浅拷贝方法有以下几种 <a class="header-anchor" href="#常见的浅拷贝方法有以下几种" aria-hidden="true">#</a></h3><ul><li>使用Object.assign()方法，将原始对象的属性浅拷贝到目标对象中。例如：</li></ul><div class="language-JavaScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> newObj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#BABED8;"> obj)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>使用扩展运算符（…）将对象浅拷贝到新对象中。例如：</li></ul><div class="language-JavaScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">c</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">}};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> newObj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{...</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>使用Array.prototype.slice()方法将数组浅拷贝到新数组中。例如：</li></ul><div class="language-JavaScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">4</span><span style="color:#BABED8;">]]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> newArr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="深拷贝" tabindex="-1">深拷贝 <a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a></h2><p>从内存中完整的拷贝一份,并且会在堆内存中开辟一个新的区域存放, 拷贝出来的新对象和原始对象互相独立,互不影响</p><p>常见的深拷贝方法有以下几种</p><ul><li><p>使用JSON序列化与反序列化</p><ul><li>**JSON.stringify() 将对象转化为字符串</li><li>JSON.parse() 将字符串转为对象**</li></ul></li><li><p>递归遍历对象，创建新的对象</p></li></ul><h3 id="面经" tabindex="-1">面经 <a class="header-anchor" href="#面经" aria-hidden="true">#</a></h3><p><strong>如果我有一个对象数组A，想生成一个B的对象数组，把A赋值给了B，当我改变了B的话A会改变吗，为什么？（其实就是深浅拷贝问题)</strong></p><p>1.会改变 2.当你将对象数组A赋值给B,实际上将A的<strong>内存地址的索引</strong>赋值给了B.A和B实际上同指向一块内存地址,引用的是同一个对象 3.当你修改B时,实际上是在修改对象本身, AB同指向一个对象所以A也会改变,</p><p><strong>ES6中有个拷贝的方法，你知道那个方法吗？你还知道其他哪些方法？</strong> ES6中的拷贝方法为Object.assign，它是一个浅拷贝的使用</p>`,17),o=[e];function t(r,c,i,D,y,F){return a(),n("div",null,o)}const A=s(p,[["render",t]]);export{B as __pageData,A as default};
