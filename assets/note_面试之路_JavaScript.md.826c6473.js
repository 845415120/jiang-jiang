import{_ as s,o as n,c as a,h as l}from"./app.0ca118e2.js";const u=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{},"headers":[{"level":2,"title":"ES6常用的API有哪些？","slug":"es6常用的api有哪些","link":"#es6常用的api有哪些","children":[]},{"level":2,"title":"箭头函数","slug":"箭头函数","link":"#箭头函数","children":[{"level":3,"title":"1. JavaScript有哪些数据类型，它们的区别？","slug":"_1-javascript有哪些数据类型-它们的区别","link":"#_1-javascript有哪些数据类型-它们的区别","children":[]},{"level":3,"title":"2. 数据类型检测的方式有哪些","slug":"_2-数据类型检测的方式有哪些","link":"#_2-数据类型检测的方式有哪些","children":[]},{"level":3,"title":"3. 判断数组的方式有哪些","slug":"_3-判断数组的方式有哪些","link":"#_3-判断数组的方式有哪些","children":[]},{"level":3,"title":"6. intanceof 操作符的实现原理及实现","slug":"_6-intanceof-操作符的实现原理及实现","link":"#_6-intanceof-操作符的实现原理及实现","children":[]},{"level":3,"title":"3.new操作符的实现步骤如下","slug":"_3-new操作符的实现步骤如下","link":"#_3-new操作符的实现步骤如下","children":[]}]},{"level":2,"title":"数组方法","slug":"数组方法","link":"#数组方法","children":[]},{"level":2,"title":"检索","slug":"检索","link":"#检索","children":[{"level":3,"title":"indexOf()","slug":"indexof","link":"#indexof","children":[]},{"level":3,"title":"startsWith()","slug":"startswith","link":"#startswith","children":[]},{"level":3,"title":"includes()","slug":"includes","link":"#includes","children":[]}]},{"level":2,"title":"截取","slug":"截取","link":"#截取","children":[{"level":3,"title":"charAt()","slug":"charat","link":"#charat","children":[]},{"level":3,"title":"slice()","slug":"slice","link":"#slice","children":[]},{"level":3,"title":"substring()","slug":"substring","link":"#substring","children":[]},{"level":3,"title":"substr()","slug":"substr","link":"#substr","children":[]},{"level":3,"title":"split(分割符)","slug":"split-分割符","link":"#split-分割符","children":[]}]},{"level":2,"title":"原型对象,构造函数,实例","slug":"原型对象-构造函数-实例","link":"#原型对象-构造函数-实例","children":[]},{"level":2,"title":"原型链","slug":"原型链","link":"#原型链","children":[]},{"level":2,"title":"原型链继承","slug":"原型链继承","link":"#原型链继承","children":[]},{"level":2,"title":"跨域问题","slug":"跨域问题","link":"#跨域问题","children":[]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":2,"title":"1.原型链继承","slug":"_1-原型链继承","link":"#_1-原型链继承","children":[]}],"relativePath":"note/面试之路/JavaScript.md","lastUpdated":1694595205000}'),p={name:"note/面试之路/JavaScript.md"},o=l(`<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-hidden="true">#</a></h1><h2 id="es6常用的api有哪些" tabindex="-1">ES6常用的API有哪些？ <a class="header-anchor" href="#es6常用的api有哪些" aria-hidden="true">#</a></h2><ol><li><strong>let和const</strong>：引入了块级作用域变量的声明方式。</li><li><strong>箭头函数</strong>：提供了更简洁的函数声明语法。</li><li><strong>模板字符串</strong>：允许使用反引号（\`）创建多行字符串和插入变量。</li><li><strong>解构赋值</strong>：可以从数组或对象中快速提取值并赋给变量。</li><li>默认参数：在函数声明时可以设置参数的默认值。</li><li>扩展运算符：用于将数组或对象展开为独立的元素。</li><li><strong>类（Class）</strong>：引入了类和面向对象编程的概念。</li><li><strong>模块化</strong>（Modules）：通过import和export语句实现模块的导入和导出。</li><li><strong>Promise</strong>：用于处理异步操作，提供了更优雅的方式来处理回调函数。 10.<strong>Set和Map</strong>：提供了集合和字典数据结构，分别对应Set和Map对象。 11.<strong>Symbol</strong>：引入了一种新的原始数据类型，用于创建唯一的标识符。</li><li>Proxy：允许创建一个代理对象，用于拦截和自定义对象的操作。</li><li>数组方法：ES6添加了许多数组的新方法，如forEach、map、filter、reduce等。</li><li>对象方法：ES6引入了一些新的对象方法，如Object.assign、Object.keys、 Object.values等</li></ol><h2 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a></h2><p>没有自己的this 语法简洁 没有prototype,不能作为构造函数 不能new调用</p><p>作用: 保留上下文：没有自己的this绑定，它会捕获所在上下文的this值 this的值是在函数定义时确定的，而不是在函数被调用时动态绑定</p><h3 id="_1-javascript有哪些数据类型-它们的区别" tabindex="-1">1. JavaScript有哪些数据类型，它们的区别？ <a class="header-anchor" href="#_1-javascript有哪些数据类型-它们的区别" aria-hidden="true">#</a></h3><p>JavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。</p><h3 id="_2-数据类型检测的方式有哪些" tabindex="-1">2. 数据类型检测的方式有哪些 <a class="header-anchor" href="#_2-数据类型检测的方式有哪些" aria-hidden="true">#</a></h3><p>（1）typeof</p><p>其中数组、对象、null都会被判断为object，其他判断都正确。</p><p>（2）instanceof</p><p>其内部运行机制是判断在其原型链中能否找到该类型的原型。只能正确判断引用数据类型</p><p>（3） constructor</p><p>有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor 对象访问它的构造函数</p><p>（4）Object.prototype.toString.call()</p><h3 id="_3-判断数组的方式有哪些" tabindex="-1">3. 判断数组的方式有哪些 <a class="header-anchor" href="#_3-判断数组的方式有哪些" aria-hidden="true">#</a></h3><ul><li>通过Object.prototype.toString.call()做判断</li><li>通过原型链做判断</li><li>通过ES6的Array.isArray()做判断</li><li>通过instanceof做判断</li><li>通过Array.prototype.isPrototypeOf</li></ul><h3 id="_6-intanceof-操作符的实现原理及实现" tabindex="-1">6. intanceof 操作符的实现原理及实现 <a class="header-anchor" href="#_6-intanceof-操作符的实现原理及实现" aria-hidden="true">#</a></h3><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">function myInstanceof(left</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> right) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  // 获取对象的原型</span></span>
<span class="line"><span style="color:#BABED8;">  let proto = Object.getPrototypeOf(</span><span style="color:#B2CCD6;">left</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">  // 获取构造函数的 prototype 对象</span></span>
<span class="line"><span style="color:#BABED8;">  let prototype = </span><span style="color:#B2CCD6;">right</span><span style="color:#BABED8;">.prototype</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;">  // 判断构造函数的 prototype 对象是否在对象的原型链上</span></span>
<span class="line"><span style="color:#BABED8;">  while (true) {</span></span>
<span class="line"><span style="color:#BABED8;">    if (!proto) return false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    if (proto === prototype) return true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    // 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型</span></span>
<span class="line"><span style="color:#BABED8;">    proto = Object.getPrototypeOf(proto)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_3-new操作符的实现步骤如下" tabindex="-1">3.new操作符的实现步骤如下 <a class="header-anchor" href="#_3-new操作符的实现步骤如下" aria-hidden="true">#</a></h3><ol><li>创建一个对象</li><li>将构造函数的作用域赋给新对象（也就是设置原型将对象的__proto__属性指向构造函数的prototype属性）</li><li>让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</li><li>返回新的对象</li></ol><h2 id="数组方法" tabindex="-1">数组方法 <a class="header-anchor" href="#数组方法" aria-hidden="true">#</a></h2><p><img src="https://cdn.staticaly.com/gh/845415120/picx-images-hosting@master/20230719/cbd88a83616795e43091300213c15b4.4zj6z9d2ucc0.webp" alt="alt"><img src="https://cdn.staticaly.com/gh/845415120/picx-images-hosting@master/20230719/8a976e52c6b42546d482548293258ef.18mcwhmamzeo.webp" alt="alt"></p><h1 id="字符串操作" tabindex="-1">字符串操作 <a class="header-anchor" href="#字符串操作" aria-hidden="true">#</a></h1><p><img src="https://cdn.staticaly.com/gh/845415120/picx-images-hosting@master/20230719/c76f24f20ac9d3a5357dd47fbfd5228.2lxnx25maf60.webp" alt="alt"></p><h2 id="检索" tabindex="-1">检索 <a class="header-anchor" href="#检索" aria-hidden="true">#</a></h2><h3 id="indexof" tabindex="-1">indexOf() <a class="header-anchor" href="#indexof" aria-hidden="true">#</a></h3><p>从字符串前开始检索<strong>子字符串</strong>出现的位置</p><h4 id="lastindexof" tabindex="-1">lastIndexOf() <a class="header-anchor" href="#lastindexof" aria-hidden="true">#</a></h4><p>从字符串后方检索<strong>子字符串</strong>出现的位置</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> paragraph </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The quick brown fox jumps over the lazy dog. If the dog barked, was it really lazy?</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> searchTerm </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dog</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> index </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> paragraph</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#BABED8;">(searchTerm)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(index)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="startswith" tabindex="-1">startsWith() <a class="header-anchor" href="#startswith" aria-hidden="true">#</a></h3><p>判断当前字符串是否以另外一个给定的子字符串开头，并根据判断结果返回 true 或 false。</p><h4 id="endswith" tabindex="-1">endsWith() <a class="header-anchor" href="#endswith" aria-hidden="true">#</a></h4><p>字符串是否以指定子字符串结尾</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> str1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jiang</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">j</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">endsWith</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">j</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="includes" tabindex="-1">includes() <a class="header-anchor" href="#includes" aria-hidden="true">#</a></h3><p>方法执行区分大小写的搜索，以确定是否可以在一个字符串中找到另一个字符串，并根据情况返回 true 或 false。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 区分大小写</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> sentence </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The quick brown fox jumps over the lazy dog.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> word </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fox</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">文字</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">word</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">sentence</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#BABED8;">(word) </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">存在</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">不存在</span><span style="color:#89DDFF;">&quot;}</span><span style="color:#C3E88D;">在文章中</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="截取" tabindex="-1">截取 <a class="header-anchor" href="#截取" aria-hidden="true">#</a></h2><h3 id="charat" tabindex="-1">charAt() <a class="header-anchor" href="#charat" aria-hidden="true">#</a></h3><p>返回指定位置的字符</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 返回一个由给定索引处的单个 UTF-16 码元构成的新字符串。0 1 2 3 4 </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> sentence </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The quick brown fox jumps over the lazy dog.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> index </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(sentence</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">charAt</span><span style="color:#BABED8;">(index))</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">The character at index </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> is </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">sentence</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">charAt</span><span style="color:#BABED8;">(index)</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="slice" tabindex="-1">slice() <a class="header-anchor" href="#slice" aria-hidden="true">#</a></h3><p>提取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The quick brown fox jumps over the lazy dog.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">)) </span><span style="color:#676E95;font-style:italic;">//quick</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="substring" tabindex="-1">substring() <a class="header-anchor" href="#substring" aria-hidden="true">#</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The quick brown fox jumps over the lazy dog.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">))</span><span style="color:#676E95;font-style:italic;">// quick</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="substr" tabindex="-1">substr() <a class="header-anchor" href="#substr" aria-hidden="true">#</a></h3><p>返回一个字符串中从指定位置开始到指定字符数的字符。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123456789011.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substr</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="split-分割符" tabindex="-1">split(分割符) <a class="header-anchor" href="#split-分割符" aria-hidden="true">#</a></h3><p>使用分割符分割字符串,并以数组获取结果 分隔符可以是单个字符、另一个字符串或正则表达式</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">I am a Happy Go lucky Guy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//让我们根据空格（&#39;  &#39;）字符拆分字符串</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> message</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(arr)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// [&quot;I&quot;, &quot;am&quot;, &quot;a&quot;, &quot;Happy&quot;, &quot;Go&quot;, &quot;lucky&quot;, &quot;Guy&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(arr[</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">])</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;I&quot;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(arr[</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">])</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;am&quot;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(arr[</span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">])</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;a&quot;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(arr[</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">])</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;Happy&quot;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(arr[</span><span style="color:#F78C6C;">4</span><span style="color:#BABED8;">])</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;Go&quot;,</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(arr[</span><span style="color:#F78C6C;">5</span><span style="color:#BABED8;">])</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;lucky&quot;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(arr[</span><span style="color:#F78C6C;">6</span><span style="color:#BABED8;">])</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;Guy&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//split() 方法的主要目的是从字符串中获取你感兴趣的块，以便在之后的用例中使用它们。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//可以使用空字符串（&#39;&#39;）作为分隔符按每个字符拆分字符串</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(message</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// [&quot;I&quot;, &quot; &quot;, &quot;a&quot;, &quot;m&quot;, &quot; &quot;, &quot;a&quot;, &quot; &quot;, &quot;H&quot;, &quot;a&quot;, &quot;p&quot;, &quot;p&quot;, &quot;y&quot;, &quot; &quot;, &quot;G&quot;, &quot;o&quot;, &quot; &quot;, &quot;l&quot;, &quot;u&quot;, &quot;c&quot;, &quot;k&quot;, &quot;y&quot;, &quot; &quot;, &quot;G&quot;, &quot;u&quot;, &quot;y&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//当你在没有分隔符的字符串上调用 split() 方法时，它会返回一个包含整个字符串的数组。</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(message</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#BABED8;">())</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// returns [&quot;I am a Happy Go lucky Guy&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//设置拆分的长度</span></span>
<span class="line"><span style="color:#BABED8;">string</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#BABED8;">(splitter</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> limit)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">//limit 参数限制了拆分的数量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">I am a Happy Go lucky Guy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(message</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">4</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// [&quot;I&quot;, &quot;am&quot;, &quot;a&quot;, &quot;Happy&quot;] </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//使用正则表达式拆分</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> message </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">The sky is blue. Grass is green! Do you know the color of the Cloud?</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//让我们在句点（.）、感叹号（!）和问号（?）处拆分此字符串</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> sentences </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> message</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">/[</span><span style="color:#C3E88D;">.,!,?</span><span style="color:#89DDFF;">]/</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(sentences)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The sky is blue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Grass is green</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Do you know the color of the Cloud</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#BABED8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//用另一个字符替换字符串中所有出现的字符</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Tapas Adhikary</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> subs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(subs)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// [&quot;Tapas&quot;, &quot;Adhikary&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> joined </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> subs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">//join() 方法通过使用作为参数传递的字符连接元素来返回一个字符串</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(joined)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// Tapas-Adhikary </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//ES6：如何使用数组解构进行拆分</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//ECMAScript2015（ES6）引入了一种更具创新性的方法来从数组中提取元素并将其分配给变量。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//这种智能语法被称为数组解构。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//我们可以将它与 split() 方法一起使用，以更少的代码轻松地将输出分配给变量。</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Tapas Adhikary</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;">firstName</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> lastName</span><span style="color:#89DDFF;">]</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//[&quot;Tapas&quot;,&quot; Adhikary&quot;]</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(firstName)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//这里我们使用空格字符作为分隔符来拆分名称。然后我们使用数组解构语法将数组的返回值分配给几个变量（firstName 和 lastName）。</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><h1 id="事件循环机制" tabindex="-1">事件循环机制 <a class="header-anchor" href="#事件循环机制" aria-hidden="true">#</a></h1><p>因为JavaScript是单线程的语言 当一段代码中有同步和异步代码时,会先将同步代码压入执行栈中,将异步代码放到任务队列中,微任务放到微任务队列，宏任务放到宏任务队列,将同步代码执行完之后,事件循环会先把微任务队列执行清空,微任务队列清空后，进入宏任务队列，取宏任务队列的第一个项任务进行执行，执行完之后，查看微任务队列是否有任务，有的话，清空微任务队列。然后再执行宏任务队列，反复操作,直到所有队列任务执行完毕。</p><p>微任务队列的代表就是，Promise.then，MutationObserver，宏任务的话就是 setImmediate setTimeout setInterva</p><p><img src="https://cdn.staticaly.com/gh/845415120/picx-images-hosting@master/20230725/1672381958585-bbb9aa05-0cec-478b-b819-b0c722b90fac.8jf5yhyzzo4.webp" alt="alt"></p><h1 id="原型对象" tabindex="-1">原型对象 <a class="header-anchor" href="#原型对象" aria-hidden="true">#</a></h1><p>每个函数在创建时都被赋予一个prototype属性,它指向函数的原型对象</p><p>构造函数的prototype属性会指向它的原型对象,通过构造函数可以创建实例</p><h2 id="原型对象-构造函数-实例" tabindex="-1">原型对象,构造函数,实例 <a class="header-anchor" href="#原型对象-构造函数-实例" aria-hidden="true">#</a></h2><p>每一个函数在创建时都被赋予一个prototype属性,在默认情况下所有原型对象都会增加一个constructor属性,指向prototype属性所在的函数,即<strong>构造函数</strong></p><p>当我们通过new操作符调用构造函数创建一个实例时,实例具有一个<code>_ _proto_ _</code>属性指向构造函数的原型对象.</p><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-hidden="true">#</a></h2><p>在JavaScript中几乎所有对象都有<code>__proto__</code>属性指向函数原型对象,</p><p>而函数的原型对象同样存在<code>__proto__</code>属性指向上一级原型对象,层层往上指,直到最上层某个原型对象为null</p><p><img src="https://cdn.staticaly.com/gh/845415120/picx-images-hosting@master/20230707/image.1l03s01gwu2o.webp" alt=""></p><h2 id="原型链继承" tabindex="-1">原型链继承 <a class="header-anchor" href="#原型链继承" aria-hidden="true">#</a></h2><p>原型链继承的主要思想是：重写子类的prototype属性，将其指向父类的实例。</p><p>我们定义一个子类Cat，用于继承父类Animal，子类Cat的实现代码如下</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 子类Cat</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Cat</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 原型继承</span></span>
<span class="line"><span style="color:#FFCB6B;">Cat</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Animal</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 很关键的一句，将Cat的构造函数指向自身</span></span>
<span class="line"><span style="color:#FFCB6B;">Cat</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">constructor </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Cat</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//因为如果不将Cat原型对象的constructor属性指向自身的构造函数的话，那将会指向父类Animal的构造函数。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Cat.prototype.constructor === Animal; // true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//所以在设置了子类的prototype属性后，需要将其constructor属性指向Cat。</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> cat </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Cat</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">加菲猫</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(cat</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">type)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">// Animal</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(cat</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">// 加菲猫</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(cat</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#BABED8;">())</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 加菲猫正在睡觉！</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(cat</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eat</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">猫粮</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 加菲猫正在吃：猫粮</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="跨域问题" tabindex="-1">跨域问题 <a class="header-anchor" href="#跨域问题" aria-hidden="true">#</a></h2><ul><li><p>JSONP：在DOM文档中,使用<code>&lt;script&gt;</code>标签，但却缺点只能发 GET 请求并且容易受到XSS跨站脚本攻击</p></li><li><p>CORS：通过在服务器配置响应头 Access-Control-Allow-xxx字段来设置访问的白名单、可允许访问的方式等</p></li><li><p>html原生的websocket</p></li></ul><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-hidden="true">#</a></h2><p>继承的几种方式，方便能在必要的时候拿出解决方案。既然要实现继承，肯定要有父类，这里我们定义了一个父类Animal并增加属性、实例函数和原型函数，具体代码如下</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 定义一个父类Animal</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Animal</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// 属性</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Animal</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">动物</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// 实例函数</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">sleep</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">正在睡觉！</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 原型函数</span></span>
<span class="line"><span style="color:#FFCB6B;">Animal</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eat</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">food</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">正在吃：</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">food</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_1-原型链继承" tabindex="-1">1.原型链继承 <a class="header-anchor" href="#_1-原型链继承" aria-hidden="true">#</a></h2><p>原型链继承的主要思想是：重写子类的prototype属性，将其指向父类的实例。</p><p>我们定义一个子类Cat，用于继承父类Animal，子类Cat的实现代码如下</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 子类Cat</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Cat</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 原型继承</span></span>
<span class="line"><span style="color:#FFCB6B;">Cat</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Animal</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 很关键的一句，将Cat的构造函数指向自身</span></span>
<span class="line"><span style="color:#FFCB6B;">Cat</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">constructor </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Cat</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//因为如果不将Cat原型对象的constructor属性指向自身的构造函数的话，那将会指向父类Animal的构造函数。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Cat.prototype.constructor === Animal; // true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//所以在设置了子类的prototype属性后，需要将其constructor属性指向Cat。</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> cat </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Cat</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">加菲猫</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(cat</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">type)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">// Animal</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(cat</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">// 加菲猫</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(cat</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#BABED8;">())</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 加菲猫正在睡觉！</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(cat</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">eat</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">猫粮</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 加菲猫正在吃：猫粮</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,82),e=[o];function t(r,c,i,y,D,F){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{u as __pageData,A as default};
